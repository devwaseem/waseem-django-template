version: '3.8'

services:
    caddy:
        restart: unless-stopped
        image: caddy:2.7
        # image: caddy
        # build:
        #     context: .
        #     dockerfile: docker/caddy/Dockerfile
        volumes:
            - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile # configuration
            - caddy-config:/config # configuration autosaves
            - caddy-data:/data # saving certificates
            - /data/static:/var/www/static:ro # serving django's statics
            - /data/log:/var/log:rw
        env_file:
            - .env
        ports:
            - '80:80/tcp'
            - '80:80/udp'
            - '443:443/tcp'
            - '443:443/udp'
        depends_on:
            - web
        networks:
            - proxynet

    django: &django
        build:
            context: .
            dockerfile: docker/app/Dockerfile
            args:
                ARCH: x86_64
                POSTGRES_VERSION: 15
        volumes:
            - tmp-data:/tmp
            - /data/static:/var/www/static:rw
            - /data/log:/var/log:rw
            - /data:/data:rw
        env_file:
            - .env

    django_migrate:
        <<: *django
        command: python3 manage.py migrate --noinput
        depends_on:
            - postgres
        restart: "no"  # Ensure it doesn't restart

    django_collectstatic:
        <<: *django
        command: python3 manage.py collectstatic --noinput
        restart: "no"

    web:
        <<: *django
        restart: unless-stopped
        image: production_web_server
        command: gunicorn app.wsgi:application --config /app/gunicorn_config.py
        depends_on:
            - postgres
            - redis
            - django_migrate
            - django_collectstatic
        expose:
            - '3000'
        networks:
            - webnet
            - proxynet

    worker_cpu:
      <<: *django
      restart: unless-stopped
      command: celery --app app worker -E -l INFO -Q celery --concurrency 1 --pool solo
      depends_on:
        - postgres
        - redis
        - django_migrate
        - django_collectstatic

    worker_io:
      <<: *django
      restart: unless-stopped
      command: celery --app app worker -E -l INFO -Q celery_io --concurrency 10 --pool gevent
      depends_on:
        - postgres
        - redis
        - django_migrate
        - django_collectstatic

    celery_beat:
      <<: *django
      restart: unless-stopped
      command: celery --app app beat -l INFO -s /data/celery/celerybeat-schedule
      depends_on:
        - postgres
        - redis
        - django_migrate
        - django_collectstatic

    celery_flower:
      <<: *django
      restart: unless-stopped
      command: celery --app app flower --basic-auth=admin:admin --persistent=True --db=/data/celery/flower_db --max_tasks=1000
      depends_on:
        - postgres
        - redis
        - django_migrate
        - django_collectstatic
      ports:
        - "5555:5555/tcp"
      networks:
          - webnet

    redis:
        restart: unless-stopped
        image: redis:6.2-alpine
        container_name: redis_production
        volumes:
            - redis-data:/data
        expose:
            - '6379'
        networks:
            - webnet

    postgres:
        restart: unless-stopped
        build:
            context: .
            dockerfile: docker/postgres/Dockerfile
            args:
                POSTGRES_VERSION: 15
        volumes:
            - /data/postgresql/data:/var/lib/postgresql/data
            - /data:/data:rw
            - /data/db-backups:/backups
        env_file:
            - .env
        expose:
            - '5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - webnet

    pg_bouncer:
        restart: unless-stopped
        image: edoburu/pgbouncer
        env_file:
            - .env
        expose:
            - '5432'
        networks:
            - webnet

volumes:
    caddy-config:
    caddy-data:
    redis-data:
    tmp-data:

networks:
    webnet:
    proxynet:
