[project]
name = "{{cookiecutter.project_name}}"
version = "0.1.0"
description = ""
authors = [{ name = "Waseem akram", email = "waseem07799@gmail.com" }]
requires-python = "==3.13.1"
readme = "README.md"
dependencies = [
  "Django[argon2]<6.0",
  "argon2-cffi>=21.3.0,<22",
  "boto3>=1.34.104,<2",
  "celery>=5.2.7,<6",
  "django-admin-interface>=0.22.1,<0.23",
  "django-allauth>=0.54.0,<0.55",
  "django-anymail[amazon-ses]~=8.6",
  "django-browser-reload>=1.7.0,<2",
  "django-celery-email>=3.0.0,<4",
  "django-constance>=3.1.0,<4",
  "django-csp~=3.7",
  "django-dbbackup>=4.0.2,<5",
  "django-environ>=0.9.0,<0.10",
  "django-feather>=0.3.0,<0.4",
  "django-filter~=24.2",
  "django-frontend-kit<1.0.0",
  "django-health-check~=3.18",
  "django-htmx>=1.12.2,<2",
  "django-http-referrer-policy>=1.1.1,<2",
  "django-ipware>=5.0.0,<6",
  "django-lifecycle>=1.2.3,<2",
  "django-model-utils>=4.2.0,<5",
  "django-nested-admin>=4.0.2,<5",
  "django-object-actions>=4.2.0,<5",
  "django-permissions-policy>=4.13.0,<5",
  "django-phonenumber-field[phonenumberslite]>=7.0.0,<8",
  "django-ratelimit>=4.1.0,<5",
  "django-redis>=5.2.0,<6",
  "django-render-block>=0.9.2,<0.10",
  "django-solo>=2.3.0,<3",
  "django-split-settings>=1.2.0,<2",
  "django-storages[boto3]~=1.14",
  "django-structlog>=4.0.1,<5",
  "django-unfold>=0.30.0,<0.31",
  "django-widget-tweaks>=1.4.12,<2",
  "djangorestframework>=3.14.0,<4",
  "drf-spectacular>=0.27.2,<0.28",
  "easy-thumbnails>=2.8.3,<3",
  "gevent>=24.2.1,<25",
  "gunicorn>=20.1.0,<21",
  "hiredis>=2.0.0,<3",
  "mjml-python>=1.3.4",
  "numerize>=0.12,<0.13",
  "psycopg[binary]>=3.1.18,<4",
  "pydantic>=1.10.21",
  "python-dateutil>=2.8.2,<3",
  "redis>=4.3.4,<5",
  "rich>=13.7.1,<14",
  "sentry-sdk[django]~=2.3",
  "structlog>=22.1.0,<23",
  "tenacity>=9.0.0",
  "types-python-dateutil>=2.8.19.3,<3",
  "uvicorn[standard]>=0.19.0,<0.20",
  "whitenoise[brotli]>=6.6.0,<7",
  "django-stubs-ext>=5.1.3",
  "django-extensions>=3.2.3,<4",
  # "psycopg2-binary>=2.9.10",
]

[dependency-groups]
dev = [
  "celery-types>=0.17.0,<0.18",
  "coverage>=7.4.0,<8",
  "django-coverage-plugin>=3.0.0,<4",
  "django-cprofile-middleware>=1.0.5,<2",
  "django-debug-toolbar>=5.0.1,<6",
  "django-debug-toolbar-template-profiler>=2.1.0,<3",
  "django-silk~=5.1",
  "pyinstrument>=4.6.2,<5",
  "django-stubs[compatible-mypy]>=4.2.7,<5",
  "djangorestframework-stubs[compatible-mypy]>=3.14.5,<4",
  "djhtml>=3.0.6,<4",
  "djlint>=1.19.13,<2",
  "fabric2>=3.0.0,<4",
  "flake8>=6.0.0,<7",
  "hypothesis[django]>=6.61.0,<7",
  "ipdb>=0.13.9,<0.14",
  "jupyterlab>=3.5.0,<4",
  "mixer>=7.2.2,<8",
  "nplusone>=1.0.0,<2",
  "pre-commit>=2.20.0,<3",
  "pudb>=2022.1.3,<2023",
  "pytest>=7.4.4,<8",
  "pytest-cov>=4.0.0,<5",
  "pytest-describe>=2.1.0,<3",
  "pytest-django>=4.5.2,<5",
  "pytest-mock>=3.10.0,<4",
  "pytest-subtests>=0.13.1,<0.14",
  "pytest-sugar>=0.9.6,<0.10",
  "pytest-xdist>=3.1.0,<4",
  "ruff>=0.1.11,<0.2",
  "traitlets>=5.13.0,<6",
  "types-requests>=2.28.11.15,<3",
  "watchdog>=2.2.0,<3",
  "werkzeug>=2.2.3,<3",
]


[tool.pyright]
exclude = [".venv"]
venvPath = "."
venv = ".venv"

[tool.basedpyright]
include = ["app"]
venvPath = "./.venv"
pythonVersion = "3.13.1"
pythonPlatform = "Linux"
typeCheckingMode = "off"

reportMissingTypeStubs = false
reportIncompatibleVariableOverride = false
reportUnusedParameter = false

[tool.djlint]
custom_html = "mjml,mj-head,mj-\\w+,c-\\w+,c-\\w{\\.\\w+}*"


[tool.mypy]

# https://mypy.readthedocs.io/en/stable/config_file.html

python_version = "3.12"
mypy_path = "."


plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

exclude = ['manage.py']

disable_error_code = ['import-untyped']


allow_redefinition = false
check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
error_summary = true
# explicit_package_bases = true
ignore_errors = false
ignore_missing_imports = false
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
strict = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.django-stubs]
module = "django-stubs"
django_settings_module = "app.settings"

[[tool.mypy.overrides]]
module = "*.migrations.*"
# Django migrations should not produce any errors:
ignore_errors = true


[tool.ruff]

exclude = [
  "*.egg",
  "*/migrations/*.py",
  ".bzr",
  ".cache",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".local",
  ".mypy_cache",
  ".nox",
  ".npm",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pycache__",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "manage.py",
  "node_modules",
  "site-packages",
  "venv",
]

extend-select = [
  "A", # flake8-builtins
  # flake8-annotations - https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
  "ANN001",
  "ANN002",
  "ANN003",
  "ANN201",
  "ANN202",
  "ANN204",
  "ANN205",
  "ANN206",
  "ARG",    # flake8-unused-arguments (ARG)
  "ASYNC",  # flake8-async (ASYNC)
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions (C4)
  "C90",    # mccabe (C90)
  "DJ",     # flake8-django
  "DTZ",    # flake8-datetimez (DTZ)
  "E",      # pycodestyle Error
  "ERA",    # eradicate (ERA)
  "F",      # Pyflakes
  "FBT",    # flake8-boolean-trap (FBT)
  "FIX",    # flake8-fixme (FIX)
  "FURB",   # refurb (FURB)
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "LOG",    # flake8-logging (LOG)
  "N",      # pep8-naming
  "PERF",   # Perflint (PERF)
  "PIE",    # flake8-pie
  "PTH",    # flake8-use-pathlib (PTH)
  "PYI",    # flake8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return (RET)
  "RSE",    # flake8-raise (RSE)
  "RUF",    # Ruff-specific rules (RUF)
  "SIM",    # flake8-simplify
  "SLF",    # flake8-self (SLF)
  "T10",    # flake8-debugger (T10)
  "T20",    # flake8-print
  # "TD",    # flake8-todos (TD)
  "TID", # flake8-tidy-imports (TID)
  "TRY", # tryceratops (TRY)
  "W",   # pycodestyle Warning
  # "D",     # pydocstyle (D)
  "FLY",  # flynt (FLY)
  "SLOT", #flake8-slots
]
ignore = [
  "D100", # undocumented-public-module
  "D104", # undocumented-public-package
  # "D203",   # one-blank-line-before-class
  "D212",   # multi-line-summary-first-line
  "RUF012", # mutable-class-default
  "TRY003", # raise-vanilla-args
  'A003',   # builtin-attribute-shadowing
]

line-length = 79
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# select = ["E4", "E7", "E9", "F"]
# ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
#
[tool.ruff.lint.per-file-ignores]
"**/admin/*" = [
  "RUF012", # mutable-class-default
  "D101",   # undocumented-public-class
]
"**/__init__.py" = [
  "F403", # undefined-local-with-import-star
  "F401", # unused-import
]
"**/{tests,docs,tools}/*" = ["E402", "E501"]

"**/management/commands/*" = [
  'A003', # builtin-attribute-shadowing
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "app.settings"
filterwarnings = ["ignore::DeprecationWarning"]


addopts = [
  '--create-db',
  '--color=yes',
  '--strict-markers',
  '--strict-config',
  '--tb=short',
  # '--durations=0',
  # '--durations-min=0.5',
  '--cov=app/',
  '--cov-report=html',
  # '--doctest-modules',
  # '--cov-report=term',
]

markers = [
  "unit: mark as Unit Tests",
  "integration: mark as Integration",
  "e2e: mark as End to End",
  "slow: mark test as slow.",
]

[tool.pytest_env]
TEST = true
LOG_DB = false
DEBUG = false


[tool.coverage.run]
branch = true
disable_warnings = ["no-data-collected"]
omit = [
  './app/settings/*',
  './app/tests/*',
  './app/migrations/*',
  './app/celery.py',
  './app/celeryconfig.py',
  './app/schema.py',
  './app/wsgi.py',
  './app/asgi.py',
]


[tool.coverage.report]
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  "if TYPE_CHECKING",
  "if DEBUG",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",

  # Skip any pass lines such as may be used for @abstractmethod
  "pass",

  # Have to re-enable the standard pragma
  "pragma: no cover",
]
