[tool.poetry]
name = "{{cookiecutter.project_verbose_name}}"
version = "0.1.0"
description = ""
authors = ["Waseem akram <waseem07799@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.12.2"
argon2-cffi = "^21.3.0"
celery = "^5.2.7"
Django = { extras = ["argon2"], version = "^5.0" }
django-admin-interface = "^0.22.1"
django-allauth = "^0.54.0"
django-anymail = { extras = ["amazon-ses"], version = "^8.6" }
django-browser-reload = "^1.7.0"
django-celery-email = "^3.0.0"
django-csp = "^3.7"
django-dbbackup = "^4.0.2"
django-environ = "^0.9.0"
django-feather = "^0.3.0"
django-htmx = "^1.12.2"
django-http-referrer-policy = "^1.1.1"
django-ipware = "^5.0.0"
django-mjml = "^1.0"
django-model-utils = "^4.2.0"
django-nested-admin = "^4.0.2"
django-permissions-policy = "^4.13.0"
django-phonenumber-field = { extras = ["phonenumberslite"], version = "^7.0.0" }
django-ratelimit = "^4.1.0"
django-redis = "^5.2.0"
django-render-block = "^0.9.2"
django-split-settings = "^1.2.0"
django-storages = { extras = ["boto3"], version = "^1.14" }
django-structlog = "^4.0.1"
django-widget-tweaks = "^1.4.12"
djangorestframework = "^3.14.0"
easy-thumbnails = "^2.8.3"
gunicorn = "^20.1.0"
hiredis = "^2.0.0"
numerize = "^0.12"
psycopg2 = "^2.9.5"
pydantic = "^1.10.2"
python-dateutil = "^2.8.2"
redis = "^4.3.4"
structlog = "^22.1.0"
types-python-dateutil = "^2.8.19.3"
uvicorn = { extras = ["standard"], version = "^0.19.0" }


[tool.poetry.group.dev.dependencies]
argparse = "^1.4.0"
black = "^22.10.0"
django-coverage-plugin = "^3.0.0"
django-cprofile-middleware = "^1.0.5"
django-debug-toolbar = "^3.7.0"
django-extensions = "^3.2.1"
django-silk = "^5.0.2"
django-stubs = { extras = ["compatible-mypy"], version = "^1.14.0" }
djhtml = "^3.0.6"
djlint = "^1.19.13"
fabric2 = "^3.0.0"
flake8 = "^6.0.0"
hypothesis = { extras = ["django"], version = "^6.61.0" }
ipdb = "^0.13.9"
jupyterlab = "^3.5.0"
mixer = "^7.2.2"
neovim = "^0.3.1"
nplusone = "^1.0.0"
pre-commit = "^2.20.0"
pudb = "^2022.1.3"
pylint = "^2.15.9"
pylint-django = "^2.5.3"
pylint-pytest = "^1.1.2"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-django = "^4.5.2"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.6"
pytest-xdist = "^3.1.0"
types-requests = "^2.28.11.15"
watchdog = "^2.2.0"
werkzeug = "^2.2.3"

[tool.pyright]
exclude = [".venv"]
venvPath = "."
venv = ".venv"

[tool.djlint]
custom_html = "mjml,mj-head,mj-\\w+"

[tool.mypy]

# https://mypy.readthedocs.io/en/stable/config_file.html

python_version = "3.12"
mypy_path = "./server"


plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

exclude = ['manage.py']

disable_error_code = ['import-untyped']


allow_redefinition = false
check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
error_summary = true
# explicit_package_bases = true
ignore_errors = false
ignore_missing_imports = false
implicit_reexport = false
local_partial_types = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
strict = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.django-stubs]
module = "django-stubs"
django_settings_module = "server.settings"

[[tool.mypy.overrides]]
module = "*.migrations.*"
# Django migrations should not produce any errors:
ignore_errors = true


[tool.ruff]

exclude = [
  "*.egg",
  "*/migrations/*.py",
  ".bzr",
  ".cache",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".local",
  ".mypy_cache",
  ".nox",
  ".npm",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pycache__",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "manage.py",
  "node_modules",
  "site-packages",
  "venv",
]

extend-select = [
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments (ARG)
  "ASYNC", # flake8-async (ASYNC)
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions (C4)
  "C90",   # mccabe (C90)
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez (DTZ)
  "E",     # pycodestyle Error
  "ERA",   # eradicate (ERA)
  "F",     # Pyflakes
  "FBT",   # flake8-boolean-trap (FBT)
  # "FIX",   # flake8-fixme (FIX)
  "FURB", # refurb (FURB)
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "LOG",  # flake8-logging (LOG)
  "N",    # pep8-naming
  "PERF", # Perflint (PERF)
  "PIE",  # flake8-pie
  "PTH",  # flake8-use-pathlib (PTH)
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return (RET)
  "RSE",  # flake8-raise (RSE)
  "RUF",  # Ruff-specific rules (RUF)
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self (SLF)
  "T10",  # flake8-debugger (T10)
  "T20",  # flake8-print
  # "TD",    # flake8-todos (TD)
  "TID", # flake8-tidy-imports (TID)
  "TRY", # tryceratops (TRY)
  "W",   # pycodestyle Warning
  # "D",     # pydocstyle (D)
]
ignore = [
  "D100", # undocumented-public-module
  "D104", # undocumented-public-package
  # "D203",   # one-blank-line-before-class
  "D212",   # multi-line-summary-first-line
  "RUF012", # mutable-class-default
  "TRY003", # raise-vanilla-args
  "ANN101", # missing-type-self
  'A003',   # builtin-attribute-shadowing

]

line-length = 79
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# select = ["E4", "E7", "E9", "F"]
# ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["server"]
#
[tool.ruff.lint.per-file-ignores]
"**/admin/*" = [
  "RUF012", # mutable-class-default
  "D101",   # undocumented-public-class
]
"**/__init__.py" = [
  "F403", # undefined-local-with-import-star
  "F401", # unused-import
]
"**/{tests,docs,tools}/*" = ["E402", "E501"]

"**/management/commands/*" = [
  'A003', # builtin-attribute-shadowing
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "server.settings"
filterwarnings = [
  "ignore::DeprecationWarning",
  # "ignore::django.utils.deprecation.RemovedInDjango50Warning",
]


addopts = [
  '--create-db',
  '--color=yes',
  '--strict-markers',
  '--strict-config',
  '--tb=short',
  '--cov=core/',
  '--cov-report=html',
  # '--doctest-modules',
  # '--cov-report=term',
]


# Extra options:

[tool.coverage.run]
branch = true
disable_warnings = ["no-data-collected"]


[tool.coverage.report]
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",

  # Skip any pass lines such as may be used for @abstractmethod
  "pass",

  # Have to re-enable the standard pragma
  "pragma: no cover",
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
